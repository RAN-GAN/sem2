1.KMP Algorithm
As a software engineer working on a text editor, implement the "Find" functionality using the Knuth-Morris-Pratt (KMP) algorithm to efficiently locate occurrences of a specific word or phrase within a larger document.

Input Format

First line contains a string representing the document content.
Second line contains a string representing the word or phrase to be found.

Output Format

A vector of integers, where each integer represents the starting index of a match found in the text.
Print no match found if there is no match.


Constraints

1 <= Text <= 10^6
1 <= Pattern <= 10^5

Test Case 1:
Input:
abxabcabcaby
abcaby
Output: 6

Test Case 2:
Input:
hello world
ox
Output: No match found

Test Case 3:
Input:
mississippi
issip
Output: 4

Test Case 4:
Input:
aabaaabaaac
aabaaac
Output: 4

Test Case 5:
Input:
helloworld
llo
Output: 2

ANSWER
import java.util.*;

class Main{
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String txt=sc.nextLine();
        String pat=sc.nextLine();
        new Main().KMPSearch(pat, txt);
        
    }
    
    void KMPSearch(String pat, String txt){
        int M = pat.length();
        int N = txt.length();
        
        int lps[] = new int[M];
        int j = 0;
        
        computeLPSArray(pat,M,lps);
        
        int i = 0;
        ArrayList<Integer> results = new ArrayList<Integer>();
        while(i < N){
            if(pat.charAt(j) == txt.charAt(i)){
                j++;
                i++;
                
            }
            if(j == M){
                results.add(i-j);
                j = lps[j - 1];
                
            }
            else if (i < N && pat.charAt(j) != txt.charAt(i)){
                if(j != 0)
                j = lps[j - 1];
                else
                i = i + 1;
                
            }
            
        }
        if(results.isEmpty())
        System.out.println("No match found");
        else
        for (int result : results)
        System.out.println(result);
        
    }
    
    void computeLPSArray(String pat, int M, int lps[]){
        int len = 0;
        int i = 1;
        lps[0] = 0;
        
        while(i < M){
            if(pat.charAt(i) == pat.charAt(len)){
                len++;
                lps[i] = len;
                i++;
                
            }
            else{
                if(len != 0)
                len = lps[len - 1];
                else{
                    lps[i] = len;
                    i++;
                    
                }
                
            }
            
        }
        
    }
    
}
END
2.Rare manuscript
A young researcher searches for a rare manuscript. He has a list of specific words (the pattern) he needs to find within many books (the text). Leo checks each page, starting from every position, until he locates all occurrences of the words.

Input Format

The first line contains a string str.
The next line contains a string that represents a pattern.

Output Format

Displays the starting indices where the pattern is found in the string str.
Print Invalid input, if a special character is entered as input.


Constraints

1 <= str.length <= 100

TestCases
Test Case 1:
Input:
ababcababcabc
abc
Output: 
2
7
10

Test Case 2:
Input:
Programming$
prog
Output: Invalid input

Test Case 3:
Input:
helloworld
world
Output: 5

Test Case 4:
Input:
racecar
car
Output: 4

Test Case 5:
Input:
abracadabra
abra
Output: 
0
7

ANSWER

import java.util.*;
public class Main
{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        String pattern = sc.nextLine();
        
        if(str.matches("[a-zA-Z]+") && pattern.matches("[a-zA-Z]+")) {
            int patternLength = pattern.length();
            for (int i = 0; i <= str.length() - patternLength; i++)
                if (str.substring(i, i + patternLength).equals(pattern))
               System.out.println(i);
            
        }
        else {
            System.out.println("Invalid input");
            
        }
        
        sc.close();
        
    }
    
}


END
3.K-th permutation sequence
Given a set of N distinct integers, your task is to find and print the K-th permutation sequence in lexicographical order. A permutation is an arrangement of the elements in any order, and the lexicographical order is the natural order of permutations based on the numerical or alphabetical order of the elements.

Input Format

The first line contains two integers, N and K.
The second line contains N distinct integers representing the elements of the set.

Output Format

Print the K-th permutation of the given set of integers in lexicographical order.
If the input is invalid (e.g., 𝐾 is greater than the total number of permutations or non-integer values), print "Invalid input"


Constraints

1 <= N <= 10

Test Case 1:
Input:
3 4
1 2 3
Output: 2 3 1

Test Case 2:
Input:
3 -1
1 2 3
Output: Invalid input

Test Case 3:
Input:
3 1
1 2 3
Output: 1 2 3

Test Case 4:
Input:
5 1
1 2 3 4 5
Output: 1 2 3 4 5

Test Case 5:
Input:
4 10
1 2 3 4
Output: 2 3 4 1

ANSWER

import java.util.*;

public class Main {
    static String permutation;
    static int count = 0;
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        
        if (K <= 0 || N <= 0 || N > 10) {
            System.out.println("Invalid input");
            return;
            
        }
        
        Vector<Integer> vector = new Vector<>();
        for (int i = 0; i < N; i++)
        vector.add(sc.nextInt());
        
        Collections.sort(vector);
        
        permutation = new String();
        count = 0;
        
        permute(vector, 0, N, K);
        
        System.out.println(permutation);
        
    }
    
    static void permute(Vector<Integer> a, int i, int n, int K) {
        if (i == n) {
            count++;
            if (count == K) {
                for(int j = 0; j < n; j++)
                permutation = permutation.concat(a.get(j) + " ");
                
            }
            return;
            
        }
        
        for(int j = i; j < n; j++) {
            Collections.swap(a, i, j);
            permute(a, i + 1, n, K);
            Collections.swap(a, i, j);
            
        }
        
    }
    
}

END
4.Rat in a Maze
Given an N x N maze, the task is to find a path for a rat starting from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1). The rat can only move in two directions: right or down. The maze is represented by a grid where cells with value 1 are open paths, and cells with value 0 are walls that the rat cannot pass through. You need to print a valid solution path if it exists.

Input Format

The first line contains an integer N, representing the size of the maze.
The next N lines each contain N integers, where each integer is either 0 (wall) or 1 (path), representing the maze grid.

Output Format

If a solution exists, print the solution grid, where 1 represents the cells that are part of the path and 0 represents the cells that are not.
If the input is invalid (e.g., 𝑁 ≤ 0 or non-integer values or values except 0 and 1), print "Invalid input"


Constraints

1 <= N <= 10

Test Case 1:
Input:
4
1 0 0 0
1 1 0 1
0 1 0 0
0 1 1 1
Output:
1 0 0 0
1 1 0 0
0 1 0 0
0 1 1 1

Test Case 2:
Input:
3
1 0 a
1 1 0
0 1 1
Output: Invalid input

Test Case 3:
Input:
3
1 0 0
1 1 0
0 1 1
Output:
1 0 0
1 1 0
0 1 1

Test Case 4:
Input:
5
1 0 1 0 0
1 1 1 0 0
0 1 0 1 0
0 1 0 1 1
0 1 1 1 1
Output:
1 0 0 0 0
1 1 0 0 0
0 1 0 0 0
0 1 0 0 0
0 1 1 1 1

ANSWER

// editor1
import java.util.*;

class Main{
    static int[] dx = {1,0,0,-1};
    static int[] dy = {0,-1,1,0};
    static char[] dir = {'D','L','R','U'};
    
    public static void findPath(int[][] arr, int x,int y, int n, String path){
        if(x==n-1 && y==n-1){
            System.out.println(path);
            return;
        }
        
        for(int i=0;i<4;i++){
            int newx = x+dx[i];
            int newy = y+dy[i];
            
            if(newx >= 0 && newy >= 0 && newx<n && newy<n && arr[newx][newy]==1){
                arr[x][y] = 0;
                findPath(arr,newx,newy,n,path+dir[i]);
                arr[x][y] = 1;
            }
        }
    }
    
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        
        if(n<=0){
            System.out.println("Invalid input");
        }
        
        int[][] arr = new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                arr[i][j] = sc.nextInt();
            }
        }
        
        if(arr[0][0] == 1)
            findPath(arr,0,0,n,"");
        
    }
}

END
5.Financial Trading Firm
You are developing software for a financial trading firm. The firm is analyzing potential investment opportunities and needs to determine if a set of assets can be combined to achieve a specific target investment value.



Input format

The first line contains two integers n(The number of assets) and target(The target investment value).
The second line contains n space-separated integers, representing the values of the assets.


Output format

Print "Yes" if there exists a subset of assets that sums up to the target value, "No" otherwise.
Print Invalid input if the input has any non-numeric characters.


Constraints

1 <= n <= 20
1 <= asset value <= 1000
1 <= target value <= 10000

Test Case 1:
Input:
5 10
3 5 7 1 9
Output: Yes

Test Case 2:
Input:
3 4
1 2 a 4
Output: Invalid input

Test Case 3:
Input:
4 10
1 2 3 4
Output: Yes

Test Case 4:
Input:
3 5
2 2 2
Output: No

Test Case 5:
Input:
7 4
1 2 3 4 5 6 7
Output: Yes

ANSWER

import java.util.*;

class Main{
    static boolean f = false;
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if(n<=1 && n>20){
            System.out.println("Invalid input");return;
        }
        int t = sc.nextInt();
        if(t<=1 && t<=100){
            System.out.println("Invalid input");return;
        }
        int[] a = new  int[n];
        
        for(int i=0;i<n;i++){
            if(!sc.hasNextInt()){
                System.out.print("Invalid input");
                return;
            }
            
            if(a[i]<=1 && a[i]>=1000){
                System.out.println("Invalid input");return;
            }
            a[i] = sc.nextInt();
        }
        
        subset(a,0,t);
        
        if(f){
            System.out.println("Yes");
        }
        else
            System.out.println("No");
    }
    
    static void subset(int[] a,int index, int target){
        if(target == 0){
            f=true;
            return;
        }
        
        if(index == a.length || target<0){
            return;
        }
        
        subset(a,index+1,target-a[index]);
        subset(a,index+1,target);
    }
}