Fork() System Call:

ALGORITHM:
Step 1: Start the program.
Step 2: Declare the variables pid and child id.
Step 3: Get the child id value using system call fork().
Step 4: If child id value is greater than zero then print as “i am in the parent process”.
Step 5: If child id! = 0 then using getpid() system call get the process id.
Step 6: Print “i am in the parent process” and print the process id.
Step 7: If child id! = 0 then using getppid() system call get the parent process id.
Step 8: Print “i am in the parent process” and print the parent process id.
Step 9: Else If child id value is less than zero then print as “i am in the child process”.
Step 10: If child id! = 0 then using getpid() system call get the process id.
Step 11: Print “i am in the child process” and print the process id.
Step 12: If child id! = 0 then using getppid() system call get the parent process id.
Step 13: Print “i am in the child process” and print the parent process id.
Step 14: Stop the program.

PROGRAM :
#include <stdio.h>    
#include <sys/types.h> 
#include <unistd.h>   

int main() {
    pid_t id, childid;
    id = getpid();

    if ((childid = fork()) > 0) {
        printf("\n I am in the parent process %d", id);
        printf("\n I am in the parent process %d", getpid());
        printf("\n I am in the parent process %d\n", getppid());
    } else {
        printf("\n I am in the child process %d", id);
        printf("\n I am in the child process %d", getpid());
        printf("\n I am in the child process %d", getppid());
    }

    return 0;
}

END
Grade of a student

#!/bin/bash
echo "Enter the marks:"
read marks
if ((marks > 90)); then
    grade="O"
elif ((marks >= 80)); then
    grade="A+"
elif ((marks >= 70)); then
    grade="A"
elif ((marks >= 60)); then
    grade="B+"
elif ((marks >= 50)); then
    grade="B"
elif ((marks >= 45)); then
    grade="C"
else
    grade="U"
fi
echo "Grade: $grade"

END
fibonacci
#!/bin/bash

# Prompt user for the number of terms
echo "Enter the number of terms:"
read n

# Initialize the first two terms
a=0
b=1
count=0

# Calculate Fibonacci sequence using a while loop
echo "Fibonacci sequence:"
while [ $count -lt $n ]
do
    echo "$a"
    # Calculate the next term
    fib=$((a + b))
    a=$b
    b=$fib
    count=$((count + 1))
done
END
Positive or Negative

#!/bin/bash
echo "Enter a number:"
read number
if ((number > 0)); then
    echo "$number is Positive"
elif ((number < 0)); then
    echo "$number is Negative"
else
    echo "The number is Zero"
fi

