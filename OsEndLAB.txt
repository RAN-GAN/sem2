Fork() System Call:

ALGORITHM:
Step 1: Start the program.
Step 2: Declare the variables pid and child id.
Step 3: Get the child id value using system call fork().
Step 4: If child id value is greater than zero then print as “i am in the parent process”.
Step 5: If child id! = 0 then using getpid() system call get the process id.
Step 6: Print “i am in the parent process” and print the process id.
Step 7: If child id! = 0 then using getppid() system call get the parent process id.
Step 8: Print “i am in the parent process” and print the parent process id.
Step 9: Else If child id value is less than zero then print as “i am in the child process”.
Step 10: If child id! = 0 then using getpid() system call get the process id.
Step 11: Print “i am in the child process” and print the process id.
Step 12: If child id! = 0 then using getppid() system call get the parent process id.
Step 13: Print “i am in the child process” and print the parent process id.
Step 14: Stop the program.

PROGRAM :
#include <stdio.h>    
#include <sys/types.h> 
#include <unistd.h>   

int main() {
    pid_t id, childid;
    id = getpid();

    if ((childid = fork()) > 0) {
        printf("\n I am in the parent process %d", id);
        printf("\n I am in the parent process %d", getpid());
        printf("\n I am in the parent process %d\n", getppid());
    } else {
        printf("\n I am in the child process %d", id);
        printf("\n I am in the child process %d", getpid());
        printf("\n I am in the child process %d", getppid());
    }

    return 0;
}

END
Grade of a student

#!/bin/bash
echo "Enter the marks:"
read marks
if ((marks > 90)); then
    grade="O"
elif ((marks >= 80)); then
    grade="A+"
elif ((marks >= 70)); then
    grade="A"
elif ((marks >= 60)); then
    grade="B+"
elif ((marks >= 50)); then
    grade="B"
elif ((marks >= 45)); then
    grade="C"
else
    grade="U"
fi
echo "Grade: $grade"

END
fibonacci
#!/bin/bash
echo "Enter the number till when the Fibonacci series must be printed:"
read a
b=0
c=1
while (( b < a ))
do
    echo "$b"
    d=$((b + c))
    b=$c
    c=$d
done
END
Positive or Negative

#!/bin/bash
echo "Enter a number:"
read number
if ((number > 0)); then
    echo "$number is Positive"
elif ((number < 0)); then
    echo "$number is Negative"
else
    echo "The number is Zero"
fi

END
Shared Memory
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/shm.h>
#include <string.h>

int main() {
    int shmid;
    void *shared_memory;
    char buff[100];

    shmid = shmget((key_t)2345, 1024, 0666 | IPC_CREAT);
    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }
    printf("Key of shared memory is %d\n", shmid);

    shared_memory = shmat(shmid, NULL, 0);
    if (shared_memory == (void *)-1) {
        perror("shmat failed");
        exit(1);
    }
    printf("Process attached at %p\n", shared_memory);
    printf("Enter some data to write to shared memory: ");

    fgets(buff, 100, stdin);
    buff[strcspn(buff, "\n")] = 0;
    strcpy((char *)shared_memory, buff);

    printf("You wrote: %s\n", (char *)shared_memory);
    printf("Data read from shared memory is: %s\n", (char *)shared_memory);

    if (shmdt(shared_memory) == -1) {
        perror("shmdt failed");
        exit(1);
    }

    return 0;
}
 END
 Producer Consumer 
 #include <stdio.h>
 #include <stdlib.h>
 int mutex = 1, full = 0, empty = 3, x = 0;
 int wait(int s) { return --s; }
 int signal(int s) { return ++s; }
 void producer() {
 mutex = wait(mutex);
 full = signal(full);
 empty = wait(empty);
 printf("Produced item %d\n", ++x);
 mutex = signal(mutex);
 }
 void consumer() {
 mutex = wait(mutex);
 full = wait(full);
 empty = signal(empty);
 printf("Consumed item %d\n", x--);
 mutex = signal(mutex);
 }
 int main() {
 int n;
 while (1) {
 printf("\n1. Producer\n2. Consumer\n3. Exit\nChoice: ");
 scanf("%d", &n);
 if (n == 1 && mutex == 1 && empty != 0) producer();
 else if (n == 2 && mutex == 1 && full != 0) consumer();
 else if (n == 3) exit(0);
 else printf("Buffer %s!\n", full == 3 ? "is full" : "is empty");
 }
 }
 END
 LRU
 #include <stdio.h>
 int fr[3] = {-1, -1, -1};
 void display() {
 for (int i = 0; i < 3; i++)
 printf("\t%d", fr[i]);
 printf("\n");
 }
 int main() {
 int p[12] = {2, 3, 2, 1, 5, 2, 4, 5, 3, 2, 5, 2};
 int fs[3], pf = 0, frsize = 3;
 printf("LEAST RECENTLY USED ALGORITHM\n");
 for (int j = 0; j < 12; j++) {
 int flag1 = 0, flag2 = 0;
 for (int i = 0; i < frsize; i++) {
 if (fr[i] == p[j]) {
 flag1 = flag2 = 1;
 break;
 }
 }
 if (!flag1) {
 for (int i = 0; i < frsize; i++) {
 if (fr[i] == -1) {
 fr[i] = p[j];
 flag2 = 1;
 break;
 }
 }
 }
 if (!flag2) {
 for (int i = 0; i < frsize; i++)
 fs[i] = 0;
 int index = 0;
 for (int k = j - 1, l = 1; l < frsize; l++, k--) {
 for (int i = 0; i < frsize; i++) {
 if (fr[i] == p[k])
 fs[i] = 1;
 }
 }
 for (int i = 0; i < frsize; i++) {
 if (fs[i] == 0) {
 index = i;
 break; }
 }
 fr[index] = p[j];
 pf++;
 }
 display();
 }
 printf("\nNo of page faults: %d\n", pf + frsize);
 return 0;
 }
 END
 Priority
#include <stdio.h>
 int main() {
 int p[20], bt[20], pri[20], wt[20], tat[20], i, k, n, temp;
 float wtavg = 0, tatavg = 0;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 for (i = 0; i < n; i++) {
 p[i] = i + 1;
 printf("Enter the Burst Time & Priority of Process %d: ", i + 1);
 scanf("%d %d", &bt[i], &pri[i]);
 }
 for (i = 0; i < n; i++) {
 for (k = i + 1; k < n; k++) {
 if (pri[i] > pri[k]) {
 temp = p[i]; p[i] = p[k]; p[k] = temp;
 temp = bt[i]; bt[i] = bt[k]; bt[k] = temp;
 temp = pri[i]; pri[i] = pri[k]; pri[k] = temp;
 }
 }
 }
 wt[0] = 0;
 tat[0] = bt[0];
 wtavg = 0;
 tatavg = tat[0];
 for (i = 1; i < n; i++) {
 wt[i] = wt[i - 1] + bt[i - 1];
 tat[i] = wt[i] + bt[i];
 wtavg += wt[i];
 tatavg += tat[i];
 }
 printf("\nPROCESS\tPRIORITY\tBURST TIME\tWAITING TIME\tTURNAROUND
 TIME\n");
 for (i = 0; i < n; i++) {
 printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i], pri[i], bt[i], wt[i], tat[i]);
 }
 printf("\nAverage Waiting Time is: %.2f", wtavg / n);
 printf("\nAverage Turnaround Time is: %.2f\n", tatavg / n);
 return 0;
 }