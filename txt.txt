1. Command Line Arguments - Movie Database:

public class MovieDatabase {
    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Invalid input");
            return;
        }
        try {
            int year = Integer.parseInt(args[2]);
            System.out.println("Title: " + args[0]);
            System.out.println("Director: " + args[1]);
            System.out.println("Year: " + year);
        } catch (NumberFormatException e) {
            System.out.println("Invalid input");
        }
    }
}
 Command Line Arguments - Recipe Manager:

public class RecipeManager {
    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Invalid input");
            return;
        }
        try {
            int cookingTime = Integer.parseInt(args[2]);
            System.out.println("Recipe: " + args[0]);
            System.out.println("Chef: " + args[1]);
            System.out.println("Cooking Time: " + cookingTime + " minutes");
        } catch (NumberFormatException e) {
            System.out.println("Invalid input");
        }
    }
}

// Command Line Arguments - Video Game Catalog:

public class GameCatalog {
    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Invalid input");
            return;
        }
        try {
            int year = Integer.parseInt(args[2]);
            System.out.println("Title: " + args[0]);
            System.out.println("Developer: " + args[1]);
            System.out.println("Year: " + year);
        } catch (NumberFormatException e) {
            System.out.println("Invalid input");
        }
    }
}
END
2. Decision Making

public class DrivingLicense {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age >= 16 && age <= 100) {
            System.out.println("Eligible");
        } else if (age >= 1 && age < 16) {
            System.out.println("Not eligible");
        }
    }
}

// Decision Making - School Admission:

public class SchoolAdmission {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age >= 5 && age <= 18) {
            System.out.println("Eligible for admission");
        } else if (age < 5 && age >= 1) {
            System.out.println("Too young for admission");
        } else if (age > 18 && age <= 100) {
            System.out.println("Too old for admission");
        }
    }
}

// Decision Making - Voting Eligibility:

public class VotingEligibility {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age >= 18 && age <= 120) {
            System.out.println("Eligible to vote");
        } else if (age >= 1 && age < 18) {
            System.out.println("Not eligible to vote");
        }
    }
}
END
3. Looping Statements

public class MarathonAnalysis {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int h = scanner.nextInt();
        
        if (n < 1 || n > 10 || h < 0 || h > 24) {
            System.out.println("Invalid input");
            return;
        }
        
        int count = 0;
        int maxMinutes = h * 60;
        
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            if (time <= maxMinutes) {
                count++;
            }
        }
        System.out.println(count);
    }
}

// Looping Statements - Swimming Competition:

public class SwimmingCompetition {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int maxMinutes = scanner.nextInt();
        
        if (n < 1 || n > 100000 || maxMinutes < 0 || maxMinutes > 60) {
            System.out.println("Invalid input");
            return;
        }
        
        int count = 0;
        int maxSeconds = maxMinutes * 60;
        
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            if (time <= maxSeconds) {
                count++;
            }
        }
        System.out.println(count);
    }
}

// Looping Statements - Cycling Race:

public class CyclingRace {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int maxHours = scanner.nextInt();
        
        if (n < 1 || n > 100000 || maxHours < 0 || maxHours > 24) {
            System.out.println("Invalid input");
            return;
        }
        
        int count = 0;
        int maxMinutes = maxHours * 60;
        
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            if (time <= maxMinutes) {
                count++;
            }
        }
        System.out.println(count);
    }
}
END
4. Jump Statements:

public class DeliveryRobot {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 1 || n > 100) {
            System.out.println("Invalid input");
            return;
        }
        
        boolean hasValid = false;
        for (int i = 0; i < n; i++) {
            int status = scanner.nextInt();
            if (status != 0 && status != 1) {
                System.out.println("Invalid input");
                return;
            }
            if (status == 1) {
                System.out.println(i);
                hasValid = true;
            }
        }
        
        if (!hasValid) {
            System.out.println("No valid locations");
        }
    }
}

// Jump Statements - Pathfinding:

public class PathFinder {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 1 || n > 100) {
            System.out.println("Invalid input");
            return;
        }
        
        boolean hasValid = false;
        for (int i = 0; i < n; i++) {
            int status = scanner.nextInt();
            if (status != 0 && status != 1) {
                System.out.println("Invalid input");
                return;
            }
            if (status == 1) {
                System.out.println(i);
                hasValid = true;
            }
        }
        
        if (!hasValid) {
            System.out.println("No valid locations");
        }
    }
}

// Jump Statements - Emergency Response:

public class EmergencySystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 1 || n > 100) {
            System.out.println("Invalid input");
            return;
        }
        
        boolean hasValid = false;
        for (int i = 0; i < n; i++) {
            int status = scanner.nextInt();
            if (status != 0 && status != 1) {
                System.out.println("Invalid input");
                return;
            }
            if (status == 1) {
                System.out.println(i);
                hasValid = true;
            }
        }
        
        if (!hasValid) {
            System.out.println("No valid locations");
        }
    }
}
END
5. 1D Array Question 1 - Retail Store Sales
public class RetailSales {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 1 || n > 7) {
            System.out.println("Invalid input");
            return;
        }
        
        int[] sales = new int[n];
        int total = 0;
        int max = 0;
        int maxDay = 0;
        
        for (int i = 0; i < n; i++) {
            sales[i] = scanner.nextInt();
            if (sales[i] < 0 || sales[i] > 10000) {
                System.out.println("Invalid input");
                return;
            }
            total += sales[i];
            if (sales[i] > max) {
                max = sales[i];
                maxDay = i;
            }
        }
        
        System.out.println(total);
        System.out.println(max);
        System.out.println(maxDay);
    }
}

// 1D Array Question 2 - Store Performance
public class StorePerformance {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 1 || n > 7) {
            System.out.println("Invalid input");
            return;
        }
        
        int[] sales = new int[n];
        int total = 0;
        int max = 0;
        int maxDay = 0;
        
        for (int i = 0; i < n; i++) {
            sales[i] = scanner.nextInt();
            if (sales[i] < 0 || sales[i] > 1000) {
                System.out.println("Invalid input");
                return;
            }
            total += sales[i];
            if (sales[i] > max) {
                max = sales[i];
                maxDay = i;
            }
        }
        
        System.out.println(total);
        System.out.println(max);
        System.out.println(maxDay);
    }
}

// 1D Array Question 3 - Weekly Sales Analysis
public class WeeklySales {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 1 || n > 7) {
            System.out.println("Invalid input");
            return;
        }
        
        int[] sales = new int[n];
        int total = 0;
        int max = 0;
        int maxDay = 0;
        
        for (int i = 0; i < n; i++) {
            sales[i] = scanner.nextInt();
            if (sales[i] < 0 || sales[i] > 1000000) {
                System.out.println("Invalid input");
                return;
            }
            total += sales[i];
            if (sales[i] > max) {
                max = sales[i];
                maxDay = i;
            }
        }
        
        System.out.println(total);
        System.out.println(max);
        System.out.println(maxDay);
    }
}

6. 2D Array Question 1
public class InventoryMatrix {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        
        if (n <= 0 || m <= 0 || n > 100 || m > 100) {
            System.out.println("Invalid input");
            return;
        }
        
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            long rowSum = 0;
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
                if (Math.abs(matrix[i][j]) > 1000000) {
                    System.out.println("Invalid input");
                    return;
                }
                rowSum += matrix[i][j];
            }
            System.out.println(rowSum);
        }
    }
}

// 2D Array Question 2 - Warehouse Management
public class WarehouseMatrix {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        
        if (n <= 0 || m <= 0 || n > 100 || m > 100) {
            System.out.println("Invalid input");
            return;
        }
        
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            long rowSum = 0;
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
                if (Math.abs(matrix[i][j]) > 1000000) {
                    System.out.println("Invalid input");
                    return;
                }
                rowSum += matrix[i][j];
            }
            System.out.println(rowSum);
        }
    }
}

// 2D Array Question 3 - Data Visualization
public class DataVisualization {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        
        if (n <= 0 || m <= 0 || n > 100 || m > 100) {
            System.out.println("Invalid input");
            return;
        }
        
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            long rowSum = 0;
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
                if (Math.abs(matrix[i][j]) > 1000000) {
                    System.out.println("Invalid input");
                    return;
                }
                rowSum += matrix[i][j];
            }
            System.out.println(rowSum);
        }
    }
}
END
7. String Question 1
public class UsernameValidator1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String username = scanner.nextLine();
        
        // Check length
        if (username.length() < 5 || username.length() > 20) {
            System.out.println("false");
            return;
        }
        
        // Check if starts or ends with underscore
        if (username.startsWith("") || username.endsWith("")) {
            System.out.println("false");
            return;
        }
        
        // Check for valid characters
        if (!username.matches("^[a-z0-9_]+$")) {
            System.out.println("false");
            return;
        }
        
        System.out.println("true");
    }
}

// String Question 2 - Gaming Profile Username
public class UsernameValidator2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String username = scanner.nextLine();
        
        // Check length
        if (username.length() < 5 || username.length() > 20) {
            System.out.println("false");
            return;
        }
        
        // Check if starts or ends with underscore
        if (username.startsWith("") || username.endsWith("")) {
            System.out.println("false");
            return;
        }
        
        // Check for valid characters
        if (!username.matches("^[a-z0-9_]+$")) {
            System.out.println("false");
            return;
        }
        
        System.out.println("true");
    }
}

// String Question 3 - E-commerce Username
public class UsernameValidator3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String username = scanner.nextLine();
        
        // Check length
        if (username.length() < 5 || username.length() > 20) {
            System.out.println("false");
            return;
        }
        
        // Check if starts or ends with underscore
        if (username.startsWith("") || username.endsWith("")) {
            System.out.println("false");
            return;
        }
        
        // Check for valid characters
        if (!username.matches("^[a-z0-9_]+$")) {
            System.out.println("false");
            return;
        }
        
        System.out.println("true");
    }
}

8. Streams Question
public class LibraryCatalog {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 0 || n > 100) {
            System.out.println("Invalid input");
            return;
        }
        
        double[] prices = new double[n];
        for (int i = 0; i < n; i++) {
            prices[i] = scanner.nextDouble();
            if (prices[i] < -1000 || prices[i] > 1000) {
                System.out.println("Invalid input");
                return;
            }
        }
        
        double threshold = scanner.nextDouble();
        if (threshold < -1000 || threshold > 1000) {
            System.out.println("Invalid input");
            return;
        }
        
        long count = Arrays.stream(prices)
                          .filter(price -> price > threshold)
                          .count();
        
        System.out.println(count);
    }
}

// Streams Question 2 - Reading Club Books
public class ReadingClub {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 0 || n > 10) {
            System.out.println("Invalid input");
            return;
        }
        
        double[] prices = new double[n];
        for (int i = 0; i < n; i++) {
            prices[i] = scanner.nextDouble();
            if (prices[i] < -1000 || prices[i] > 1000) {
                System.out.println("Invalid input");
                return;
            }
        }
        
        double threshold = scanner.nextDouble();
        if (threshold < -1000 || threshold > 1000) {
            System.out.println("Invalid input");
            return;
        }
        
        long count = Arrays.stream(prices)
                          .filter(price -> price > threshold)
                          .count();
        
        System.out.println(count);
    }
}

// Streams Question 3 - Charity Donations
public class CharityDonations {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        if (n < 0 || n > 10) {
            System.out.println("Invalid input");
            return;
        }
        
        double[] donations = new double[n];
        for (int i = 0; i < n; i++) {
            donations[i] = scanner.nextDouble();
            if (donations[i] < -1000 || donations[i] > 1000) {
                System.out.println("Invalid input");
                return;
            }
        }
        
        double threshold = scanner.nextDouble();
        if (threshold < -1000 || threshold > 1000) {
            System.out.println("Invalid input");
            return;
        }
        
        long count = Arrays.stream(donations)
                          .filter(donation -> donation > threshold)
                          .count();
        
        System.out.println(count);
    }
}
END
9. Date Question 1
public class DateDiff1 {
    public static void main(String[] args) {
        try {
            Scanner scanner = new Scanner(System.in);
            LocalDate date1 = LocalDate.parse(scanner.nextLine());
            LocalDate date2 = LocalDate.parse(scanner.nextLine());
            
            if (date1.isAfter(date2) || 
                date1.isBefore(LocalDate.of(1900, 1, 1)) ||
                date2.isAfter(LocalDate.of(2100, 12, 31))) {
                System.out.println("Invalid input");
                return;
            }
            
            long days = ChronoUnit.DAYS.between(date1, date2);
            System.out.println(days);
        } catch (Exception e) {
            System.out.println("Invalid input");
        }
    }
}

// Date Question 2 - Construction Project Timeline
public class DateDiff2 {
    public static void main(String[] args) {
        try {
            Scanner scanner = new Scanner(System.in);
            LocalDate startDate = LocalDate.parse(scanner.nextLine());
            LocalDate endDate = LocalDate.parse(scanner.nextLine());
            
            if (startDate.isAfter(endDate) || 
                startDate.isBefore(LocalDate.of(1900, 1, 1)) ||
                endDate.isAfter(LocalDate.of(2100, 12, 31))) {
                System.out.println("Invalid input");
                return;
            }
            
            long days = ChronoUnit.DAYS.