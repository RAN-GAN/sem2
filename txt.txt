ddl
CREATE TABLE Loans (
    LoanID INT,
    BorrowerID INT,
    Amount DECIMAL(10, 2),
    InterestRate DECIMAL(5, 2),
    StartDate DATE
);

CREATE TABLE Borrowers (
    BorrowerID INT,
    Name VARCHAR(100),
    CreditScore INT,
    ContactInfo VARCHAR(255)
);

CREATE TABLE Repayments (
    RepaymentID INT,
    LoanID INT,
    Amount DECIMAL(10, 2),
    RepaymentDate DATE,
    Status VARCHAR(50)
);

DROP TABLE Repayments;

ALTER TABLE Loans
ADD COLUMN LoanStatus VARCHAR(50);

END


dml
SELECT *
FROM Transactions
WHERE Amount > 1000
  AND TransactionDate >= '2023-05-01';

UPDATE Accounts
SET Balance = Balance + 1000
WHERE AccountID = 103;

END



 agg
SELECT 
    GAME_ID, 
    COUNT(PLAYER_ID) AS number_of_players
FROM 
    PLAYER_ACTIVITY
GROUP BY 
    GAME_ID;

SELECT 
    GAME_ID, 
    MIN(ACTIVITY_TIMESTAMP) AS earliest_activity
FROM 
    PLAYER_ACTIVITY
GROUP BY 
    GAME_ID;

SELECT 
    GAME_ID, 
    MAX(UPDATE_TIMESTAMP) AS latest_update
FROM 
    GAME_UPDATES
GROUP BY 
    GAME_ID;

SELECT 
    GAME_ID, 
    COUNT(ACTIVITY_ID) AS total_activities
FROM 
    PLAYER_ACTIVITY
GROUP BY 
    GAME_ID
HAVING 
    total_activities > 1;

END



sub
SELECT CUSTOMER_ID
FROM ORDERS
WHERE ORDER_DATE >= '2023-01-16'
  AND TOTAL_AMOUNT > (SELECT AVG(TOTAL_AMOUNT) FROM ORDERS);

SELECT PRODUCT_NAME
FROM PRODUCTS
WHERE STOCK_QUANTITY = 0
  AND PRODUCT_ID IN (SELECT PRODUCT_ID FROM ORDER_DETAILS);

SELECT CATEGORY
FROM PRODUCTS
GROUP BY CATEGORY
HAVING AVG(PRICE) = (SELECT MAX(AVG_PRICE) 
                     FROM (SELECT CATEGORY, AVG(PRICE) AS AVG_PRICE 
                           FROM PRODUCTS 
                           GROUP BY CATEGORY) AS CATEGORY_AVG);

SELECT CUSTOMER_ID
FROM ORDERS
WHERE ORDER_ID IN (SELECT ORDER_ID 
                   FROM ORDER_DETAILS 
                   WHERE PRODUCT_ID IN (SELECT PRODUCT_ID 
                                        FROM PRODUCTS 
                                        WHERE CATEGORY = 'Electronics'));

SELECT PRODUCT_NAME
FROM PRODUCTS
WHERE PRICE > (SELECT AVG(PRICE) 
               FROM PRODUCTS AS P2 
               WHERE P2.CATEGORY = PRODUCTS.CATEGORY);

END
join
SELECT STUDENT_NAME
FROM STUDENTS
WHERE STUDENT_ID IN (
    SELECT STUDENT_ID
    FROM ENROLLMENTS
    WHERE SCORE > 90
);

SELECT STUDENT_NAME
FROM STUDENTS
WHERE STUDENT_ID IN (
    SELECT STUDENT_ID
    FROM ENROLLMENTS
    WHERE COURSE_ID = (
        SELECT COURSE_ID
        FROM COURSES
        WHERE COURSE_NAME = 'Computer Science'
    )
);

SELECT COURSE_NAME
FROM COURSES
WHERE COURSE_ID IN (
    SELECT COURSE_ID
    FROM ENROLLMENTS
    GROUP BY COURSE_ID
    HAVING AVG(SCORE) > 85
);

SELECT INSTRUCTOR_NAME
FROM COURSES
WHERE COURSE_ID IN (
    SELECT COURSE_ID
    FROM ENROLLMENTS
    GROUP BY COURSE_ID
    HAVING COUNT(STUDENT_ID) < 3
);

SELECT STUDENT_NAME
FROM STUDENTS
WHERE STUDENT_ID IN (
    SELECT STUDENT_ID
    FROM ENROLLMENTS
    GROUP BY STUDENT_ID
    ORDER BY COUNT(COURSE_ID) DESC
);

END
views
CREATE VIEW sorder
AS SELECT salesman_id, ord_no, customer_id
FROM orders
WHERE ord_date IN('2012-08-17', '2012-10-10');

END
cursor
DELIMITER $$

create trigger trigger_dept_insert
before insert on departments for each row 

begin

insert into department_log_history(department_name,action) 
values(new.name,'Insert_New_Department');

end$$

DELIMITER ;

END
dql
SELECT e.emp_id, e.name, e.age, d.department_name, e.salary, e.joining_date
FROM Employees e
JOIN Department d ON e.department_id = d.department_id
WHERE d.department_name = 'HR'
ORDER BY e.name ASC;

SELECT e.emp_id, e.name, e.age, d.department_name, e.salary, e.joining_date
FROM Employees e
JOIN Department d ON e.department_id = d.department_id
WHERE d.department_name = 'IT'
ORDER BY e.salary DESC
LIMIT 1;