Experiment 1
Sarah is creating a program to help detect if a user has input any duplicate integers. The user first specifies the number of integers they’ll enter, then inputs the list of integers. The program should detect if any integer appears more than once.

Input Format

A single integer n, the number of integers.
n integers as input elements.


Output Format

Print "Duplicate Found" if there is any duplicate integer, otherwise "No Duplicates"
For invalid input, print "Invalid input"
n ≤ 0, print "-1"

    
Test Cases
Input:

5\n10 20 30 20 40\n/pre>

        
Expected Output: Duplicate Found


    
Input:

4\n5 y 25 35\n
Expected Output: Invalid input

Input:

3\n100 150 200\n
Expected Output: No Duplicates

Input:

-10\n
Expected Output: -1

Input:

10\n100 200 300 400 500 600 700 800 900 1000\n
Expected Output: No Duplicates

Input:

3\n100 150 200\n
Expected Output: No Duplicates

Constraints

1 ≤ n ≤ 10
Each integer should be in the range [0,1000].

ANSWER

import java.util.*;

public class DuplicateChecker {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Check if n is a valid integer
        if (!scanner.hasNextInt()) {
            System.out.println("Invalid input");
            return;
        }
        
        int n = scanner.nextInt();
        if (n <= 0) {
            System.out.println("-1");
            return;
        }

        HashSet<Integer> seenNumbers = new HashSet<>();
        for (int i = 0; i < n; i++) {
            if (!scanner.hasNextInt()) {
                System.out.println("Invalid input");
                return;
            }
            int num = scanner.nextInt();

            // Check if number is within valid range
            if (num < 0 || num > 1000) {
                System.out.println("Invalid input");
                return;
            }

            if (!seenNumbers.add(num)) {
                System.out.println("Duplicate Found");
                return;
            }
        }
        System.out.println("No Duplicates");
    }
}


END
Experiment 2
A library has a sorted list of ISBN numbers for all the books in its collection. Grace wants a program to help her locate a specific ISBN number. The program should take the number of books, the sorted list of ISBN numbers, and the ISBN she wants to find.

Input Format

A single integer n, the number of books.
n sorted integers representing ISBN numbers.
An integer representing the ISBN to search for.


Output Format

Print "Found" if the ISBN exists in the collection.
Print "Not Found" if the ISBN does not exist.
Print "Invalid input" for any non-numeric inputs.
If n ≤ 0, print "-1".


Test Cases
Input:

6\n100001 100123 100456 100789 100999 101000\n100456\n
Expected Output: Found

Input:

5\n200000 a 201000 201500 202000\n201250\n
Expected Output: Invalid input

Input:

4\n300001 300002 300003 300004\n300005\n
Expected Output: Not Found

Input:

-2\n
Expected Output: -1

Input:

3\n400100 400200 400300\n400200\n
Expected Output: Found

Input:

4\n300001 300002 300003 300004\n300005\n
Expected Output: Not Found

Constraints

-10 ≤ n ≤ 10
ISBN numbers are integers in the range [100000,999999].

ANSWER

import java.util.*;

public class ISBNFinder {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read number of books
        if (!scanner.hasNextInt()) {
            System.out.println("Invalid input");
            return;
        }
        int n = scanner.nextInt();
        
        // Validate n
        if (n <= 0) {
            System.out.println("-1");
            return;
        }
        
        int[] isbns = new int[n];
        
        // Read ISBN numbers
        for (int i = 0; i < n; i++) {
            if (!scanner.hasNextInt()) {
                System.out.println("Invalid input");
                return;
            }
            isbns[i] = scanner.nextInt();
        }
        
        // Read the ISBN to search for
        if (!scanner.hasNextInt()) {
            System.out.println("Invalid input");
            return;
        }
        int target = scanner.nextInt();
        
        // Perform binary search
        if (binarySearch(isbns, target)) {
            System.out.println("Found");
        } else {
            System.out.println("Not Found");
        }
    }
    
    private static boolean binarySearch(int[] arr, int target) {
        int left = 0, right = arr.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == target) {
                return true;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;
    }
}