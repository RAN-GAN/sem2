1.Greatest of three numbers
 
#!/bin/bash 
# Read three numbers 
echo "Enter first number:" 
read a 
echo "Enter second number:" 
read b 
echo "Enter third number:" 
read c 
# Compare the numbers 
if [ $a -gt $b ] && [ $a -gt $c ]; then 
echo "The greatest number is: $a" 
elif [ $b -gt $c ]; then 
echo "The greatest number is: $b" 
else 
echo "The greatest number is: $c" 
fi
END 
2.Voter is eligible to vote

#!/bin/bash 
# Read the age of the voter 
echo "Enter your age:" 
read age 
# Check eligibility 
if [ $age -ge 18 ]; then 
echo "You are eligible to vote." 
else 
echo "You are not eligible to vote." 
fi 
END
3.Execl() system call
CODE 
#include<sys/types.h> 
#include<unistd.h> 
#include<stdio.h> 
Int main() 
{ 
    printf(“Before execl \n”); 
    execl(“/bin/ls”,”ls”,(char*)0); 
    execl("/bin/sh", "sh", "-c", "echo hello", NULL); 
    printf(“A er Execl\n”); 
}
END
4.Sum of Digitss. 
CODE 
#!/bin/bash 
read -p "Enter a number: " num 
sum=0 
while [ $num -gt 0 ] 
do 
dig=$((num%10)) 
sum=$((sum+dig)) 
num=$((num/10)) 
done 
echo "The sum of digits of the given number: $sum" 

END
1.Best-fit contiguous memory allocation
CODE 
#include <stdio.h>

void main() {
    int fragment[20], b[20], p[20];
    int i, j, nb, np, temp, lowest = 9999;
    static int barray[20], parray[20];

    printf("\n\t\t\tMemory Management Scheme - Best Fit");
    printf("\nEnter the number of blocks: ");
    scanf("%d", &nb);

    printf("Enter the number of processes: ");
    scanf("%d", &np);

    printf("\nEnter the size of the blocks:-\n");
    for (i = 1; i <= nb; i++) {
        printf("Block no.%d: ", i);
        scanf("%d", &b[i]);
    }

    printf("\nEnter the size of the processes :-\n");
    for (i = 1; i <= np; i++) {
        printf("Process no.%d: ", i);
        scanf("%d", &p[i]);
    }

    for (i = 1; i <= np; i++) {
        lowest = 9999;
        for (j = 1; j <= nb; j++) {
            if (barray[j] != 1) {
                temp = b[j] - p[i];
                if (temp >= 0 && lowest > temp) {
                    parray[i] = j;
                    lowest = temp;
                }
            }
        }
        fragment[i] = lowest;
        barray[parray[i]] = 1;
    }

    printf("\nProcess_no\tProcess_size\tBlock_no\tBlock_size\tFragment");
    for (i = 1; i <= np && parray[i] != 0; i++) {
        printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, p[i], parray[i], b[parray[i]], fragment[i]);
    }
}
END
2.Round Robin CPU scheduling algorithm.  
 #include <stdio.h>

int main() {
    int i, j, n, bu[10], wa[10], tat[10], t, ct[10], max;
    float awt = 0, att = 0, temp = 0;
    
    printf("Enter the no of processes -- ");
    scanf("%d", &n);
    
    for(i = 0; i < n; i++) {
        printf("\nEnter Burst Time for process %d -- ", i+1);
        scanf("%d", &bu[i]);
        ct[i] = bu[i];
    }
    
    printf("\nEnter the size of time slice -- ");
    scanf("%d", &t);
    
    max = bu[0];
    for(i = 1; i < n; i++)
        if(max < bu[i])
            max = bu[i];
            
    for(j = 0; j < (max/t) + 1; j++)
        for(i = 0; i < n; i++)
            if(bu[i] != 0) {
                if(bu[i] <= t) {
                    tat[i] = temp + bu[i];
                    temp = temp + bu[i];
                    bu[i] = 0;
                } else {
                    bu[i] = bu[i] - t;
                    temp = temp + t;
                }
            }
            
    for(i = 0; i < n; i++) {
        wa[i] = tat[i] - ct[i];
        att += tat[i];
        awt += wa[i];
    }
    
    printf("\nThe Average Turnaround time is -- %.2f", att/n);
    printf("\nThe Average Waiting time is -- %.2f", awt/n);
    printf("\n\tPROCESS\t BURST TIME \t WAITING TIME\tTURNAROUND TIME\n");
    
    for(i = 0; i < n; i++)
        printf("\t%d \t %d \t\t %d \t\t %d \n", i+1, ct[i], wa[i], tat[i]);
        
    return 0;
}
END
3. Producer consumer problem

#include <stdio.h>
#include <stdlib.h>

int mutex = 1, full = 0, empty = 3, x = 0;

void producer(void);
void consumer(void);
int wait(int);
int signal(int);

int main() {
    int n;
    
    printf("\n1.Producer\n2.Consumer\n3.Exit");
    
    while(1) {
        printf("\nEnter your choice: ");
        scanf("%d", &n);
        
        switch(n) {
            case 1: 
                if((mutex == 1) && (empty != 0))
                    producer();
                else
                    printf("\nBuffer is full!!");
                break;
                
            case 2: 
                if((mutex == 1) && (full != 0))
                    consumer();
                else
                    printf("\nBuffer is empty!!");
                break;
                
            case 3:
                exit(0);
                break;
        }
    }
    return 0;
}

int wait(int s) {
    return (--s);
}

int signal(int s) {
    return(++s);
}

void producer() {
    mutex = wait(mutex);
    full = signal(full);
    empty = wait(empty);
    x++;
    printf("\nProducer produces the item %d", x);
    mutex = signal(mutex);
}

void consumer() {
    mutex = wait(mutex);
    full = wait(full);
    empty = signal(empty);
    printf("\nConsumer consumes item %d", x);
    x--;
    mutex = signal(mutex);
}
END
4. Optimal page replacement algorithm. 
 
CODE
#include <stdio.h>

void optimal(int string[20], int n, int size) {
    int frames[n];
    for (int i = 0; i < n; i++)
        frames[i] = -1;
 
    int index = -1, page_miss = 0, page_hits = 0, full = 0;
    printf("OPTIMAL PAGE REPLACEMENT ALGORITHM\n");
 
    for (int i = 0; i < size; i++) {
        int symbol = string[i], flag = 0;
 
        for (int j = 0; j < n; j++) {
            if (symbol == frames[j]) {
                flag = 1;
                break;
            }
        }

        if (flag == 1) {
            printf("\nSymbol: %d Frame: ", symbol);
            for (int j = 0; j < n; j++)
                printf("%d ", frames[j]);
            page_hits++;
        } else {
            if (full == 0) {
                index = (index + 1) % n;
                frames[index] = symbol;
                page_miss++;

                printf("\nSymbol: %d Frame: ", symbol);
                for (int j = 0; j < n; j++)
                    printf("%d ", frames[j]);

                if (i == n - 1)
                    full = 1;
            } else {
                int pos = -1, replace_index = -1;
 
                for (int j = 0; j < n; j++) {
                    int found = 0;
                    for (int k = i + 1; k < size; k++) {
                        if (frames[j] == string[k]) {
                            found = 1;
                            if (pos < k) {
                                pos = k;
                                replace_index = j;
                            }
                            break;
                        }
                    }
                    if (found == 0) {
                        pos = size;
                        replace_index = j;
                        break;
                    }
                }

                frames[replace_index] = symbol;
                page_miss++;

                printf("\nSymbol: %d Frame: ", symbol);
                for (int j = 0; j < n; j++)
                    printf("%d ", frames[j]);
            }
        }
    }

    printf("\nPage hits: %d", page_hits);
    printf("\nPage misses: %d\n", page_miss);
}

int main(void) {
    int string[] = {2, 3, 4, 2, 1, 3, 7, 5, 4, 3};
    int no_frames = 3;
    int size = sizeof(string) / sizeof(int);

    optimal(string, no_frames, size);
    return 0;
}
